{"name": "Проверка успешного получения заказов пользователя - код ответа 200", "status": "failed", "statusDetails": {"message": "AssertionError: body errors: ['\"totalToday\" expected: 1, actual:1416', \"not expected keys: ['orders/name']\"]\nassert (200 == 200 and 2 == 0)\n +  where 200 = <Response [200]>.status_code\n +  and   2 = len(['\"totalToday\" expected: 1, actual:1416', \"not expected keys: ['orders/name']\"])", "trace": "self = <test_get_users_orders.TestGetUsersOrders object at 0x00000161175D5550>\ncreate_user = ({'email': 'zuhvlh@mail.com', 'name': 'okgcgt', 'password': 'hxjtyw'}, 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ey...DNhOWVkMjgwMDAxYjRkNzIxNCIsImlhdCI6MTcyODIzMjc2MiwiZXhwIjoxNzI4MjMzOTYyfQ.hg0sSuH3elnI7XC1vrUAIxjVgSjjmLcXjrTXjPqN_Fs')\ncount_burgers = 1\n\n    @allure.title('Проверка успешного получения заказов пользователя - код ответа 200')\n    @allure.description('При отправке запроса получения списка заказов пользователя с авторизацией'\n                        'на ручку GET api/orders возвращается код ответа 200 с текстом: '\n                        '\"success\": true, \"orders\": [], \"total\": \"\",\"totalToday\": \"\"}')\n    @pytest.mark.parametrize('count_burgers', data_stellar_burgers.list_count_burgers)\n    def test_successful_get_users_orders(self, create_user, count_burgers):\n        created_user = create_user\n        token = created_user[1]\n        list_ingredients = {'ingredients': helpers.generate_list_ingredients()}\n        for i in range(count_burgers):\n            StellarBurgersApi.create_order(token, list_ingredients)\n        response = StellarBurgersApi.get_users_orders(token)\n        list_errors = helpers.expected_body_response_successful_get_users_orders(response, count_burgers)\n        StellarBurgersApi.delete_user(token)\n>       assert response.status_code == 200 and len(list_errors) == 0, f'body errors: {list_errors}'\nE       AssertionError: body errors: ['\"totalToday\" expected: 1, actual:1416', \"not expected keys: ['orders/name']\"]\nE       assert (200 == 200 and 2 == 0)\nE        +  where 200 = <Response [200]>.status_code\nE        +  and   2 = len(['\"totalToday\" expected: 1, actual:1416', \"not expected keys: ['orders/name']\"])\n\ntests\\test_get_users_orders.py:24: AssertionError"}, "description": "При отправке запроса получения списка заказов пользователя с авторизациейна ручку GET api/orders возвращается код ответа 200 с текстом: \"success\": true, \"orders\": [], \"total\": \"\",\"totalToday\": \"\"}", "steps": [{"name": "Создать список ингредиентов для заказа", "status": "passed", "steps": [{"name": "Отправить запрос на получение игредиентов GET api/ingredients", "status": "passed", "start": 1728232764853, "stop": 1728232765436}], "start": 1728232764853, "stop": 1728232765436}, {"name": "Отправить запрос на создание заказа POST api/orders", "status": "passed", "parameters": [{"name": "token", "value": "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MDJiZDNhOWVkMjgwMDAxYjRkNzIxNCIsImlhdCI6MTcyODIzMjc2MiwiZXhwIjoxNzI4MjMzOTYyfQ.hg0sSuH3elnI7XC1vrUAIxjVgSjjmLcXjrTXjPqN_Fs'"}, {"name": "body", "value": "{'ingredients': ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa71', '61c0c5a71d1f82001bdaaa73', '61c0c5a71d1f82001bdaaa77']}"}], "start": 1728232765436, "stop": 1728232767070}, {"name": "Отправить запрос на получение заказов пользователя GET api/orders", "status": "passed", "parameters": [{"name": "token", "value": "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MDJiZDNhOWVkMjgwMDAxYjRkNzIxNCIsImlhdCI6MTcyODIzMjc2MiwiZXhwIjoxNzI4MjMzOTYyfQ.hg0sSuH3elnI7XC1vrUAIxjVgSjjmLcXjrTXjPqN_Fs'"}], "start": 1728232767070, "stop": 1728232767953}, {"name": "Создать словарь с ошибками тела ответа при получении списка заказов пользователя", "status": "passed", "parameters": [{"name": "response", "value": "<Response [200]>"}, {"name": "count_burgers", "value": "1"}], "start": 1728232767953, "stop": 1728232767953}, {"name": "Отправить запрос на удаление пользователя DELETE api/auth/user", "status": "passed", "parameters": [{"name": "token", "value": "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MDJiZDNhOWVkMjgwMDAxYjRkNzIxNCIsImlhdCI6MTcyODIzMjc2MiwiZXhwIjoxNzI4MjMzOTYyfQ.hg0sSuH3elnI7XC1vrUAIxjVgSjjmLcXjrTXjPqN_Fs'"}], "start": 1728232767953, "stop": 1728232769170}], "parameters": [{"name": "count_burgers", "value": "1"}], "start": 1728232764853, "stop": 1728232769170, "uuid": "2693f446-bc1c-495b-ae8e-1b7c9841bba3", "historyId": "38224aecf8f744d955868da8999832fc", "testCaseId": "3302d9effb7d356abaeb2d3e32ea9412", "fullName": "tests.test_get_users_orders.TestGetUsersOrders#test_successful_get_users_orders", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_get_users_orders"}, {"name": "subSuite", "value": "TestGetUsersOrders"}, {"name": "host", "value": "poccona"}, {"name": "thread", "value": "11304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_get_users_orders"}]}